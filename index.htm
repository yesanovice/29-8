<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>The Watch</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      overflow: hidden;
      background: black;
    }

    #overlay {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Courier New', monospace;
      font-size: 2rem;
      color: #b00;
      background: black;
      cursor: pointer;
      z-index: 2;
      text-transform: lowercase;
      transition: opacity 1s ease;
    }

    canvas {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      object-fit: contain; /* maintain 16:9 */
      z-index: 1;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background: black;
      display: none;
    }
  </style>
</head>
<body>
  <div id="overlay">press / click</div>
  <canvas id="scene"></canvas>
  <video id="hiddenVid" src="yourvideo.mp4" preload="auto" playsinline style="display:none"></video>

  <script>
    const overlay = document.getElementById('overlay');
    const canvas = document.getElementById('scene');
    const ctx = canvas.getContext('2d');
    const vid = document.getElementById('hiddenVid');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    async function goFullscreen(elem) {
      if (!document.fullscreenElement) {
        if (elem.requestFullscreen) await elem.requestFullscreen();
        else if (elem.webkitRequestFullscreen) await elem.webkitRequestFullscreen();
        else if (elem.msRequestFullscreen) await elem.msRequestFullscreen();
      }
    }

    function draw() {
      if (!vid.paused && !vid.ended) {
        const vidRatio = vid.videoWidth / vid.videoHeight;
        const canvasRatio = canvas.width / canvas.height;
        let drawWidth, drawHeight;
        if (canvasRatio > vidRatio) {
          drawHeight = canvas.height;
          drawWidth = drawHeight * vidRatio;
        } else {
          drawWidth = canvas.width;
          drawHeight = drawWidth / vidRatio;
        }
        const x = (canvas.width - drawWidth)/2;
        const y = (canvas.height - drawHeight)/2;
        ctx.drawImage(vid, x, y, drawWidth, drawHeight);
        requestAnimationFrame(draw);
      }
    }

    function startExperience() {
      overlay.style.opacity = '0';
      setTimeout(() => overlay.remove(), 1000);

      canvas.style.display = 'block';
      vid.play();

      // Keep video playing no matter what
      vid.addEventListener('pause', () => vid.play());
      vid.addEventListener('seeking', () => vid.currentTime = 0);

      // Block keys / right-click
      document.addEventListener('keydown', e => e.preventDefault());
      document.addEventListener('contextmenu', e => e.preventDefault());

      // Start drawing frames
      requestAnimationFrame(draw);
    }

    overlay.addEventListener('click', startExperience);

    // Double tap to toggle fullscreen freely
    let lastTap = 0;
    document.addEventListener('touchend', e => {
      const now = Date.now();
      if (now - lastTap < 300) {
        if (!document.fullscreenElement) goFullscreen(canvas);
        else document.exitFullscreen();
      }
      lastTap = now;
    });

    // Optional: click anywhere on desktop to toggle fullscreen
    document.addEventListener('dblclick', () => {
      if (!document.fullscreenElement) goFullscreen(canvas);
      else document.exitFullscreen();
    });

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  </script>
</body>
</html>
